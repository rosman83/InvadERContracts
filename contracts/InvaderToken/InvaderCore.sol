// SPDX-License-Identifier: MIT

pragma solidity 0.8.11;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/utils/Strings.sol"; 
import "./base/ERC721A.sol";  

/**
 * @title InvadERCore
 * @notice Produced by @InvaderETH for [ X ]. 
 * @dev Generated by the InvaderSuite [ X ].
**/ 

contract InvaderCore is Ownable, ERC721A, ReentrancyGuard {

  struct SaleConfig {
    uint256 tokenMax;
    uint256 tokenCap;
    uint256 tokenBatch;
    uint256 tokenReserve;
  }

  SaleConfig public config;

  constructor() ERC721A("InvaderCore", "INVCORE", config.tokenBatch) {}

  string private _baseTokenURI;

  function _baseURI() internal view virtual override returns (string memory) {
    return _baseTokenURI;
  }

  function setBaseURI(string calldata baseURI) external onlyOwner {
    _baseTokenURI = baseURI;
  }

  function withdrawMoney() external onlyOwner nonReentrant {
    (bool success, ) = msg.sender.call{value: address(this).balance}("");
    require(success, "Transfer failed.");
  }

  function numberMinted(address owner) public view returns (uint256) {
    return _numberMinted(owner);
  }

  function getOwnershipData(uint256 tokenId) external view returns (TokenOwnership memory) {
    return ownershipOf(tokenId);
  }
}